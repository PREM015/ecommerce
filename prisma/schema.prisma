generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[]
}

model Product {
  id                 String   @id @default(uuid())
  name               String
  description        String?
  price              Float
  imageUrl           String?
  isNew              Boolean  @default(false)
  isFeatured         Boolean  @default(false)
  brand              String?
  stock              Int      @default(0)
  rating             Float    @default(0)
  discountPercentage Float    @default(0)
  categoryId         String
  category           Category @relation(fields: [categoryId], references: [id])
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  orderItems OrderItem[]
  Review     Review[]
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String?  @unique
  phone     String?  @unique
  password  String
  avatar    String?
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders Order[] @relation("UserOrders")
  admin  Admin?  @relation("AdminUser") // optional back-reference

  reviews Review[]
}

model Admin {
  id         String   @id @default(uuid())
  userId     String   @unique
  user       User     @relation("AdminUser", fields: [userId], references: [id])
  storeName  String
  storeUrl   String?
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Order {
  id              String      @id @default(uuid())
  userEmail       String
  user            User        @relation("UserOrders", fields: [userEmail], references: [email])
  totalAmount     Float
  status          OrderStatus @default(PENDING)
  shippingAddress String
  items           OrderItem[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model OrderItem {
  id        Int    @id @default(autoincrement())
  orderId   String
  productId String
  quantity  Int

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

model Review {
  id        String   @id @default(uuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  productId String

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}
